<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <script src="https://kit.fontawesome.com/ba59337863.js" crossorigin="anonymous"></script>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-Zenh87qX5JnK2Jl0vWa8Ck2rdkQ2Bzep5IDxbcnCeuOxjzrPF/et3URy9Bv1WTRi" crossorigin="anonymous">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/js/bootstrap.bundle.min.js" integrity="sha384-OERcA2EqjJCMA+/3y+gxIOqMEjwtxJY7qPCqsdltbNJuaOe923+mo//f6V8Qbsw3" crossorigin="anonymous" defer></script>
    <link href='https://api.mapbox.com/mapbox-gl-js/v2.11.0/mapbox-gl.css' rel='stylesheet' />
    <script src='https://api.mapbox.com/mapbox-gl-js/v2.11.0/mapbox-gl.js'></script>
    <title>TurnOff</title>
    <style>
        .mapboxgl-control-container {
            display: none;
        }

        body::-webkit-scrollbar {
            display: none;
        }

        body {
            -ms-overflow-style: none;
            scrollbar-width: none;
        }

        .marker {
            background-image: url('/images/circle.png');
            background-size: cover;
            width: 15px;
            height: 15px;
            border-radius: 50%;
            cursor: pointer;
        }

        .mapboxgl-popup {
            max-width: 200px;
        }

        .mapboxgl-popup-content {
            text-align: center;
            font-family: 'Open Sans', sans-serif;
        }
    </style>
</head>
<body onload="load()">
    <div class="container-fluid">
        <div class="row d-flex align-items-center shadow" style="height: 5rem;">
            <div class="col-3 text-start px-5">
                <h1>TurnOff <i class="fa-solid fa-toggle-off"></i></h1>
            </div>
            <div class="col-9 hstack gap-3 justify-content-end px-5">
                <div id="lightBulb" style="font-size: 2.5rem;"><i class="fa-regular fa-lightbulb" style="color: gray;"></i></div>
            </div>
        </div>
        <div class="row"></div>
        <div class="row mt-5 px-5">
            <div class="col-6 d-flex justify-content-end px-5">
                <div class="w-100">
                    <h5>Location Barrier <i class="fa-solid fa-location-dot"></i></h5>
                    <div class="w-100 d-none d-md-block"></div>
                    <div class="d-flex align-items-center gap-2">
                        <input type="text" id="address" placeholder="Address" class="form-control w-50 my-2">
                        <input type="text" id="radius" placeholder="Radius" class="form-control w-25 my-2">
                        <button class="btn btn-primary" onclick="addBarrier()">Add Barrier</button>
                    </div>
                    <div class="w-100 d-none d-md-block"></div>
                    <div id='map' style='width: 100%; height: 50vh;'></div>
                </div>
            </div>
            <div class="col-6 d-flex justify-content-start px-5">
                <div class="w-100">
                    <h5>Connected Devices <i class="fa-solid fa-mobile-screen-button"></i></h5>
                    <div class="d-flex align-items-center gap-2">
                        <input type="text" id="appleid" placeholder="AppleId" class="form-control w-50 my-2">
                        <input type="password" id="password" placeholder="Password" class="form-control w-25 my-2">
                        <button class="btn btn-primary" onclick="addDevice()">Add Device</button>
                    </div>
                    <table class="table table-striped border border-secondary">
                        <thead>
                          <tr>
                            <th scope="col">AppleId</th>
                            <th scope="col">Device</th>
                            <th scope="col">InBarrier</th>
                            <th scope="col"></th>
                          </tr>
                        </thead>
                        <tbody id="deviceTableBody"></tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>

    <script>
        //Function than runs on page load
        function load() {
            getDevices();
            getBarrier();
        }

        setInterval(() => {
            load();
        }, 1000 * 60 * 5);

        mapboxgl.accessToken = 'pk.eyJ1IjoiY29kZXpoaWZ0eSIsImEiOiJja3djbWJyZm0xanR3MnFwMnp2cTAyNDBrIn0.QNlyBRhAhJJqX8Yr7tDTfw';
        const map = new mapboxgl.Map({
            container: 'map', // container ID
            style: 'mapbox://styles/codezhifty/clama5fvk000314ohkfa2ziee', // style URL
            center: [30, 40], // starting position [lng, lat]
            zoom: 2 // starting zoom
        });

        function addDevice() {
            const appleid = document.getElementById("appleid");
            const password = document.getElementById("password");
            if(appleid.value.length != 0 && password.value.length != 0) {
                fetch("http://<%=ipAddress%>:3000/addDevice", {
                    method: "POST",
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        "appleid": appleid.value,
                        "password": password.value
                    })
                })
                .then(response => response.json())
                .then(data => {
                    if(data.added) {
                        console.log("Device has been added. DeviceId: " + data.deviceid);
                    } else {
                        console.log(data.error);
                    }
                    getDevices();
                    appleid.value = "";
                    password.value = "";
                });
            }
        }

        function getDevices() {
            document.getElementById("deviceTableBody").innerHTML = "";
            fetch("http://<%=ipAddress%>:3000/getDevices")
            .then(response => response.json())
            .then(data => {
                if(typeof data.error == "undefined") {
                    if(data.some(e => e.insideBarrier == true)) {
                        document.getElementById("lightBulb").innerHTML = '<i class="fa-solid fa-lightbulb" style="color: gold;"></i>';
                    } else {
                        document.getElementById("lightBulb").innerHTML = '<i class="fa-regular fa-lightbulb" style="color: gray;"></i>';
                    }
                } else {
                    document.getElementById("lightBulb").innerHTML = '<i class="fa-regular fa-lightbulb" style="color: gray;"></i>';
                }
                if(typeof data.error == "undefined") {
                    data.forEach(device => {
                        document.getElementById("deviceTableBody").innerHTML += `<tr><td scope="row">${device.appleid}</td><td>${device.device}</td><td>${device.insideBarrier}</td><td><button style="border: none; color: red;" onclick="deleteDevice('${device.deviceid}')"><i class="fa-solid fa-trash-can"></i></button></td></tr>`;
                        
                        const feature = {
                            type: 'Feature',
                            geometry: {
                                type: 'Point',
                                coordinates: [device.longitude, device.latitude]
                            },
                            properties: {
                                title: device.device,
                                description: device.appleid
                            }
                        }

                        // create a HTML element for each feature
                        const el = document.createElement('div');
                        el.className = 'marker';

                        // make a marker for each feature and add to the map
                        new mapboxgl.Marker(el).setLngLat(feature.geometry.coordinates)
                        .setPopup(new mapboxgl.Popup({ offset: 25 }) // add popups
                        .setHTML(`<strong>${feature.properties.title}</strong><p>${feature.properties.description}</p>`))
                        .addTo(map);
                    });
                } else {
                    console.log(data.error);
                }
            });
        }

        function deleteDevice(deviceid) {
            fetch("http://<%=ipAddress%>:3000/deleteDevice", {
                method: "DELETE",
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    "deviceid": deviceid,
                })
            })
            .then(response => response.json())
            .then(data => {
                if(data.deleted) {
                    console.log(data.message);
                }
                document.querySelector(".marker").remove();
                getDevices();
            });
        }

        function getBarrier() {
            fetch("http://<%=ipAddress%>:3000/getBarrier")
            .then(response => response.json())
            .then(data => {
                if(typeof data.error == "undefined") {
                    function getZoom() {
                        if(data.radius == 15) {
                            return 15;
                        } else if (data.radius > 15) {
                            return 15 - (data.radius - 15) * 0.1;
                        } else if(data.radius < 15) {
                            return (15 - data.radius) * 0.1 + 15
                        }
                    }

                    map.flyTo({
                        center: [data.longitude, data.latitude],
                        essential: true,
                        zoom: getZoom()
                    });
                    
                    if(typeof map.getLayer('circle500') !== 'undefined') {
                        map.removeLayer('circle500').removeSource('source_circle_500');
                    }

                    map.addSource("source_circle_500", {
                        "type": "geojson",
                        "data": {
                        "type": "FeatureCollection",
                        "features": [{
                            "type": "Feature",
                            "geometry": {
                            "type": "Point",
                            "coordinates": [data.longitude, data.latitude]
                            }
                        }]
                        }
                    });

                    map.addLayer({
                        "id": "circle500",
                        "type": "circle",
                        "source": "source_circle_500",
                        "paint": {
                        "circle-radius": {
                            stops: [
                            [5, 1],
                            [15, data.radius * 10]
                            ],
                            base: 2
                        },
                        "circle-color": "red",
                        "circle-opacity": 0.6
                        }
                    });
                }
            });
        }

        function addBarrier() {
            const address = document.getElementById("address");
            const radius = document.getElementById("radius");

            if(address.value.length != 0) {
                if(radius.value.length == 0) radius.value = 15;
                fetch("https://nominatim.openstreetmap.org/search?format=json&limit=3&q=" + address.value)
                .then(response => response.json())
                .then(data => {
                    function getZoom() {
                        if(radius.value == 15) {
                            return 15;
                        } else if (radius.value > 15) {
                            return 15 - (radius.value - 15) * 0.1;
                        } else if(radius.value < 15) {
                            return (15 - radius.value) * 0.1 + 15
                        }
                    }

                    map.flyTo({
                        center: [data[0].lon, data[0].lat],
                        essential: true,
                        zoom: getZoom()
                    });
                    
                    if(typeof map.getLayer('circle500') !== 'undefined') {
                        map.removeLayer('circle500').removeSource('source_circle_500');
                    }

                    map.addSource("source_circle_500", {
                        "type": "geojson",
                        "data": {
                        "type": "FeatureCollection",
                        "features": [{
                            "type": "Feature",
                            "geometry": {
                            "type": "Point",
                            "coordinates": [data[0].lon, data[0].lat]
                            }
                        }]
                        }
                    });

                    map.addLayer({
                        "id": "circle500",
                        "type": "circle",
                        "source": "source_circle_500",
                        "paint": {
                        "circle-radius": {
                            stops: [
                            [5, 1],
                            [15, radius.value * 10]
                            ],
                            base: 2
                        },
                        "circle-color": "red",
                        "circle-opacity": 0.6
                        }
                    });

                    fetch("http://<%=ipAddress%>:3000/addBarrier", {
                        method: "POST",
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                            "longitude": data[0].lon,
                            "latitude": data[0].lat,
                            "radius": radius.value
                        })
                    })
                    .then(response => response.json())
                    .then(data => {
                        if(data.added) {
                            console.log("Barrier has been added!")
                            getDevices();
                            address.value = "";
                            radius.value = "";
                        }
                    });
                });
            }
        }
    </script>
</body>
</html>